datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Document {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  fileUrl     Json?
  name        String?
  jobSeeker   JobSeeker? @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId String?
}

model Employer {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  companyName  String?
  email        String?
  jobVacancies JobVacancy[]
}

model JobVacancy {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  title        String?
  description  String?
  applications Application[]
  employer     Employer?     @relation(fields: [employerId], references: [id])
  employerId   String?
}

model JobSeeker {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String?
  email        String?
  skills       String?
  applications Application[]
  documents    Document[]
}

model Application {
  id           String                 @id @default(cuid())
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  status       EnumApplicationStatus?
  jobSeeker    JobSeeker?             @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId  String?
  jobVacancy   JobVacancy?            @relation(fields: [jobVacancyId], references: [id])
  jobVacancyId String?
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String?
  lastName  String?
  username  String   @unique
  email     String?  @unique
  password  String
  roles     Json
}

enum EnumApplicationStatus {
  Option1
}
