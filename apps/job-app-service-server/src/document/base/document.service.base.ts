/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Document as PrismaDocument,
  JobSeeker as PrismaJobSeeker,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class DocumentServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.DocumentCountArgs, "select">): Promise<number> {
    return this.prisma.document.count(args);
  }

  async documents(
    args: Prisma.DocumentFindManyArgs
  ): Promise<PrismaDocument[]> {
    return this.prisma.document.findMany(args);
  }
  async document(
    args: Prisma.DocumentFindUniqueArgs
  ): Promise<PrismaDocument | null> {
    return this.prisma.document.findUnique(args);
  }
  async createDocument(
    args: Prisma.DocumentCreateArgs
  ): Promise<PrismaDocument> {
    return this.prisma.document.create(args);
  }
  async updateDocument(
    args: Prisma.DocumentUpdateArgs
  ): Promise<PrismaDocument> {
    return this.prisma.document.update(args);
  }
  async deleteDocument(
    args: Prisma.DocumentDeleteArgs
  ): Promise<PrismaDocument> {
    return this.prisma.document.delete(args);
  }

  async uploadFileUrl<T extends Prisma.DocumentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocumentFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaDocument> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "fileUrl";
    const fileUrl = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.document.update({
      where: args.where,

      data: {
        fileUrl: fileUrl as InputJsonValue,
      },
    });
  }

  async downloadFileUrl<T extends Prisma.DocumentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocumentFindUniqueArgs>
  ): Promise<FileDownload> {
    const { fileUrl } = await this.prisma.document.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      fileUrl as unknown as LocalStorageFile
    );
  }

  async deleteFileUrl<T extends Prisma.DocumentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocumentFindUniqueArgs>
  ): Promise<PrismaDocument> {
    const { fileUrl } = await this.prisma.document.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      fileUrl as unknown as LocalStorageFile
    );

    return await this.prisma.document.update({
      where: args.where,

      data: {
        fileUrl: Prisma.DbNull,
      },
    });
  }

  async getJobSeeker(parentId: string): Promise<PrismaJobSeeker | null> {
    return this.prisma.document
      .findUnique({
        where: { id: parentId },
      })
      .jobSeeker();
  }
}
