/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { JobSeeker } from "./JobSeeker";
import { JobSeekerCountArgs } from "./JobSeekerCountArgs";
import { JobSeekerFindManyArgs } from "./JobSeekerFindManyArgs";
import { JobSeekerFindUniqueArgs } from "./JobSeekerFindUniqueArgs";
import { CreateJobSeekerArgs } from "./CreateJobSeekerArgs";
import { UpdateJobSeekerArgs } from "./UpdateJobSeekerArgs";
import { DeleteJobSeekerArgs } from "./DeleteJobSeekerArgs";
import { ApplicationFindManyArgs } from "../../application/base/ApplicationFindManyArgs";
import { Application } from "../../application/base/Application";
import { DocumentFindManyArgs } from "../../document/base/DocumentFindManyArgs";
import { Document } from "../../document/base/Document";
import { JobSeekerService } from "../jobSeeker.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => JobSeeker)
export class JobSeekerResolverBase {
  constructor(
    protected readonly service: JobSeekerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "JobSeeker",
    action: "read",
    possession: "any",
  })
  async _jobSeekersMeta(
    @graphql.Args() args: JobSeekerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [JobSeeker])
  @nestAccessControl.UseRoles({
    resource: "JobSeeker",
    action: "read",
    possession: "any",
  })
  async jobSeekers(
    @graphql.Args() args: JobSeekerFindManyArgs
  ): Promise<JobSeeker[]> {
    return this.service.jobSeekers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => JobSeeker, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "JobSeeker",
    action: "read",
    possession: "own",
  })
  async jobSeeker(
    @graphql.Args() args: JobSeekerFindUniqueArgs
  ): Promise<JobSeeker | null> {
    const result = await this.service.jobSeeker(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobSeeker)
  @nestAccessControl.UseRoles({
    resource: "JobSeeker",
    action: "create",
    possession: "any",
  })
  async createJobSeeker(
    @graphql.Args() args: CreateJobSeekerArgs
  ): Promise<JobSeeker> {
    return await this.service.createJobSeeker({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobSeeker)
  @nestAccessControl.UseRoles({
    resource: "JobSeeker",
    action: "update",
    possession: "any",
  })
  async updateJobSeeker(
    @graphql.Args() args: UpdateJobSeekerArgs
  ): Promise<JobSeeker | null> {
    try {
      return await this.service.updateJobSeeker({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobSeeker)
  @nestAccessControl.UseRoles({
    resource: "JobSeeker",
    action: "delete",
    possession: "any",
  })
  async deleteJobSeeker(
    @graphql.Args() args: DeleteJobSeekerArgs
  ): Promise<JobSeeker | null> {
    try {
      return await this.service.deleteJobSeeker(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Application], { name: "applications" })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async findApplications(
    @graphql.Parent() parent: JobSeeker,
    @graphql.Args() args: ApplicationFindManyArgs
  ): Promise<Application[]> {
    const results = await this.service.findApplications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Document], { name: "documents" })
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async findDocuments(
    @graphql.Parent() parent: JobSeeker,
    @graphql.Args() args: DocumentFindManyArgs
  ): Promise<Document[]> {
    const results = await this.service.findDocuments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
