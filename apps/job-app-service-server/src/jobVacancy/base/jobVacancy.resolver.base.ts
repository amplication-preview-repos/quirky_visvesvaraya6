/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { JobVacancy } from "./JobVacancy";
import { JobVacancyCountArgs } from "./JobVacancyCountArgs";
import { JobVacancyFindManyArgs } from "./JobVacancyFindManyArgs";
import { JobVacancyFindUniqueArgs } from "./JobVacancyFindUniqueArgs";
import { CreateJobVacancyArgs } from "./CreateJobVacancyArgs";
import { UpdateJobVacancyArgs } from "./UpdateJobVacancyArgs";
import { DeleteJobVacancyArgs } from "./DeleteJobVacancyArgs";
import { ApplicationFindManyArgs } from "../../application/base/ApplicationFindManyArgs";
import { Application } from "../../application/base/Application";
import { Employer } from "../../employer/base/Employer";
import { JobVacancyService } from "../jobVacancy.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => JobVacancy)
export class JobVacancyResolverBase {
  constructor(
    protected readonly service: JobVacancyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "JobVacancy",
    action: "read",
    possession: "any",
  })
  async _jobVacanciesMeta(
    @graphql.Args() args: JobVacancyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [JobVacancy])
  @nestAccessControl.UseRoles({
    resource: "JobVacancy",
    action: "read",
    possession: "any",
  })
  async jobVacancies(
    @graphql.Args() args: JobVacancyFindManyArgs
  ): Promise<JobVacancy[]> {
    return this.service.jobVacancies(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => JobVacancy, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "JobVacancy",
    action: "read",
    possession: "own",
  })
  async jobVacancy(
    @graphql.Args() args: JobVacancyFindUniqueArgs
  ): Promise<JobVacancy | null> {
    const result = await this.service.jobVacancy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobVacancy)
  @nestAccessControl.UseRoles({
    resource: "JobVacancy",
    action: "create",
    possession: "any",
  })
  async createJobVacancy(
    @graphql.Args() args: CreateJobVacancyArgs
  ): Promise<JobVacancy> {
    return await this.service.createJobVacancy({
      ...args,
      data: {
        ...args.data,

        employer: args.data.employer
          ? {
              connect: args.data.employer,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobVacancy)
  @nestAccessControl.UseRoles({
    resource: "JobVacancy",
    action: "update",
    possession: "any",
  })
  async updateJobVacancy(
    @graphql.Args() args: UpdateJobVacancyArgs
  ): Promise<JobVacancy | null> {
    try {
      return await this.service.updateJobVacancy({
        ...args,
        data: {
          ...args.data,

          employer: args.data.employer
            ? {
                connect: args.data.employer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobVacancy)
  @nestAccessControl.UseRoles({
    resource: "JobVacancy",
    action: "delete",
    possession: "any",
  })
  async deleteJobVacancy(
    @graphql.Args() args: DeleteJobVacancyArgs
  ): Promise<JobVacancy | null> {
    try {
      return await this.service.deleteJobVacancy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Application], { name: "applications" })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async findApplications(
    @graphql.Parent() parent: JobVacancy,
    @graphql.Args() args: ApplicationFindManyArgs
  ): Promise<Application[]> {
    const results = await this.service.findApplications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employer, {
    nullable: true,
    name: "employer",
  })
  @nestAccessControl.UseRoles({
    resource: "Employer",
    action: "read",
    possession: "any",
  })
  async getEmployer(
    @graphql.Parent() parent: JobVacancy
  ): Promise<Employer | null> {
    const result = await this.service.getEmployer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
