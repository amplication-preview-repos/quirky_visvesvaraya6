/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  JobVacancy as PrismaJobVacancy,
  Application as PrismaApplication,
  Employer as PrismaEmployer,
} from "@prisma/client";

export class JobVacancyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.JobVacancyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.jobVacancy.count(args);
  }

  async jobVacancies(
    args: Prisma.JobVacancyFindManyArgs
  ): Promise<PrismaJobVacancy[]> {
    return this.prisma.jobVacancy.findMany(args);
  }
  async jobVacancy(
    args: Prisma.JobVacancyFindUniqueArgs
  ): Promise<PrismaJobVacancy | null> {
    return this.prisma.jobVacancy.findUnique(args);
  }
  async createJobVacancy(
    args: Prisma.JobVacancyCreateArgs
  ): Promise<PrismaJobVacancy> {
    return this.prisma.jobVacancy.create(args);
  }
  async updateJobVacancy(
    args: Prisma.JobVacancyUpdateArgs
  ): Promise<PrismaJobVacancy> {
    return this.prisma.jobVacancy.update(args);
  }
  async deleteJobVacancy(
    args: Prisma.JobVacancyDeleteArgs
  ): Promise<PrismaJobVacancy> {
    return this.prisma.jobVacancy.delete(args);
  }

  async findApplications(
    parentId: string,
    args: Prisma.ApplicationFindManyArgs
  ): Promise<PrismaApplication[]> {
    return this.prisma.jobVacancy
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applications(args);
  }

  async getEmployer(parentId: string): Promise<PrismaEmployer | null> {
    return this.prisma.jobVacancy
      .findUnique({
        where: { id: parentId },
      })
      .employer();
  }
}
